flush Some useful procedures

flush --
newhdr immediate
proc assemble
begin
    dict load
    8 add
    copy load_byte
    128 or
    swap store_byte
    return
end

flush --
flush Assembles the following word regardless of immediacy
newhdr '
proc assemble
begin
    prs_next drop
    prs_word find entry_name add cell_align assemble
    return
end immediate

flush --
flush Nicer comment syntax
newhdr #
proc assemble
begin
    ' flush
    return
end immediate

# Now we have comments syntax, so lets define function syntax

# --
newhdr fn:
proc assemble
begin
    newhdr
    proc assemble
    begin
    return
end

# --
fn: end-fn
    lit return assemble
    ' end
    return
end immediate

# Now loops

# -- target
fn: do
    here load
end-fn immediate

# target --
fn: loop
    lit branch assemble
    here load 8 add sub assemble
end-fn immediate

# Some output helpers

# --
fn: defstr:
    newhdr
    str assemble
end-fn

defstr: nl
1 assemble_byte
10 assemble_byte
0 assemble_byte

# str len --
fn: println
    print nl print
end-fn

# And a dictionary walk

# ptr --
fn: walk
    do
        copy entry_name println
        load copy
    loop

    drop
end-fn

fn: const:
    newhdr
    const assemble
    assemble
end-fn

34 const: quotes

# start end -- start len
fn: string-from-range
    over sub
end-fn

# Exceedingly hacky because I haven't implemented conditionals yet; will happily read past the end if the terminating
# quote is not available
# -- string length
fn: s"
    in_ptr load
    do
        1 add
        copy load_byte quotes eq not
    loop
    in_ptr load 1 add swap
    copy 1 add in_update drop drop
    string-from-range
end-fn

# string length --
fn: string:
    newhdr
    str assemble
    copy assemble_byte

    here load over over add push
    string_copy

    pop here store
    0 assemble_byte
end-fn

s" Hello world!" string: greeting
greeting println nl print

kernel walk
