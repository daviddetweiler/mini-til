flush Some useful procedures

flush --
newhdr immediate
proc asm
begin
    dict load
    8 add
    copy bload
    128 or
    swap bstore
    return
end

flush --
flush Assembles the following word regardless of immediacy
newhdr '
proc asm
begin
    prs_nxt drop
    prs_wrd find de_name add calign asm
    return
end immediate


flush --
flush Nicer comment syntax
newhdr #
proc asm
begin
    ' flush
    return
end immediate

# Now we have comments syntax, so lets define function syntax

# --
newhdr fn:
proc asm
begin
    newhdr
    proc asm
    begin
    return
end

# --
fn: end-fn
    lit return asm
    ' end
    return
end immediate

# Now loops

# -- target
fn: do
    here load
end-fn immediate

# target --
fn: loop
    lit branch asm
    here load 8 add sub asm
end-fn immediate

# Some output helpers

# --
fn: defstr:
    newhdr
    str asm
end-fn

defstr: nl
1 basm
10 basm
0 basm

# str len --
fn: println
    print nl print
end-fn

# And a dictionary walk

# ptr --
fn: walk
    do
        copy de_name println
        load copy
    loop

    drop
end-fn

fn: const:
    newhdr
    const asm
    asm
end-fn

92 const: backslash

# --
fn: \
    do
        in_ptr load backslash prs_ch in_adv
        swap not or not
    loop

    in_ptr load 1 add in_adv drop drop
end-fn immediate

\
    The above magic little definition lets us do block comments
    like these.
\

34 const: quotes

# start end -- start len
fn: string-from-range
    over sub
end-fn

# Because of how prs_ch works, this treats the end of line as an implicit closing quote, which I guess is neat, though
# utterly useless.
# -- string length
fn: s"
    \
        Block comments even work inside assembly mode
    \
    in_ptr load quotes prs_ch
    in_ptr load 1 add swap
    copy 1 add in_adv drop drop
    string-from-range
end-fn

# string length --
fn: string:
    newhdr
    str asm
    copy basm

    here load over over add push
    scopy

    pop here store
    0 basm
end-fn

s" Mini (C) 2023 David Detweiler" string: banner
s" Enter `kernel walk` to see the list of instructions defined by the kernel" string: hint
banner println
hint println
nl print

# The magical part where we yield control back to the terminal
stdin load in store
