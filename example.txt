here load

dict load assemble
1 assemble_byte
36 assemble_byte 0 assemble_byte
here load cell_align here store

impl_procedure assemble
begin
    here load
    dict load assemble
    dict store

    parser_next drop
    parser_word
    copy assemble_byte
    copy push
    here load string_copy
    pop here load add here store
    0 assemble_byte
    here load cell_align here store

    return
end

dict store

$ immediate
impl_procedure assemble
begin
    dict load
    8 add
    copy load_byte
    128 or
    swap store_byte
    return
end

$ fn:
impl_procedure assemble
begin
    $
    impl_procedure assemble
    begin
    return
end

fn: '
    parser_next drop
    parser_word find entry_name add cell_align assemble
    return
end immediate

fn: end-fn
    literal_impl return assemble
    ' end
    return
end immediate

fn: do
    here load
end-fn immediate

fn: loop
    literal_impl branch_impl assemble
    here load 8 add sub assemble
end-fn immediate

fn: str:
    $
    impl_string assemble
end-fn

str: nl
1 assemble_byte
10 assemble_byte
0 assemble_byte

fn: println
    print nl print
end-fn

fn: foo
    dict load

    do
        copy entry_name println
        load copy
    loop

    drop
end-fn

foo
